# Dashboard App Design Requirements

# 1. Purpose
# - Provide a simple, clean dashboard to view, filter, and check off tasks.
# - Directly read from and write to your existing `tasks.txt` and `recurring_tasks.txt` files.

# 2. Core Features
# a. Task Display
#   - Show today’s recurring tasks (from `recurring_tasks.txt`).
#   - Show upcoming tasks (from `tasks.txt`), sorted by due date.
#   - Show most important upcoming tasks (e.g., flagged or with a priority marker).
#   - Show all tasks, grouped by area, context, and project.
# b. Task Interaction
#   - Check off tasks: Mark tasks as completed in `tasks.txt` (and optionally archive them).
#   - Check off recurring tasks: Mark as done for today, but keep them recurring.
#   - Edit tasks: (Optional, but recommended for MVP).
# c. Filtering
#   - Filter by area (e.g., Work, Personal, Health, Finances).
#   - Filter by context (e.g., @home, @work, @computer).
#   - Filter by project (if project tags exist).
# d. Sync with Files
#   - All changes (checking off, editing) must update `tasks.txt` and `recurring_tasks.txt` directly.
#   - No separate database; the files are the source of truth.

# 3. File Format Assumptions
# a. `tasks.txt`
#   - Markdown-style checkboxes:
#     Work:
#         - [ ] Task description @context +project due:2025-06-25
#         - [x] Completed task
#   - Areas as headers (`Area:`).
#   - Contexts as `@context`.
#   - Projects as `+project`.
#   - Due dates as `due:YYYY-MM-DD`.
# b. `recurring_tasks.txt`
#   - Similar format, but with recurrence info (e.g., `every:Monday`).

# 4. UI/UX Requirements
# - Minimalist, clean interface.
# - Sections for:
#   - Today’s Recurring Tasks
#   - Upcoming Tasks (by due date)
#   - Important Tasks (by priority/flag)
# - Checkboxes for marking tasks complete.
# - Dropdowns or chips for filtering by area/context/project.
# - Responsive: Works on desktop and mobile browsers.

# 5. Technical Requirements
# - Frontend: React (TypeScript preferred), or another modern JS framework.
# - Backend: Python (Flask or FastAPI) to read/write the text files.
# - File I/O: All task state is read from and written to `tasks.txt` and `recurring_tasks.txt`.
# - No database.
# - API endpoints:
#   - GET /tasks — returns parsed tasks.
#   - GET /recurring — returns parsed recurring tasks.
#   - POST /tasks/check — mark a task as complete.
#   - POST /recurring/check — mark a recurring task as done for today.
#   - (Optional) POST /tasks/edit — edit a task.

# 6. Parsing & Data Model
# - Parse tasks into objects with:
#   - id, description, completed, area, context, project, due_date, priority, recurring (if applicable).
# - Preserve file formatting when writing back.

# 7. Security & Access
# - Local use only (no authentication needed).
# - No internet access required.

# 8. Extensibility
# - Easy to add new filters (e.g., tags).
# - Easy to add new task attributes (e.g., estimated time).

fastapi
uvicorn
